


## 指针和引用的区别：

### 什么是引用：
            
####    (1)引用，即变量的别名。对引用的操作与对变量直接操作完全一样。  < 引用的声明方法：类型标识符 &引用名 = 目标变量名; >
        
    例如：
            int a = 10;     //定义一个整型变量a
            int &b = a;     //声明b是a的引用
                
            注意这里的 & 符号并不是取地址的意思，不要理解为把a的地址赋值给b的地址。b相当于是a的别名（绰号），对b的任何操
                
            作就是对a的操作。b既不是a的拷贝，也不是指向a的指针，其实b就是a它自己。 
                
            
####    (2)常引用：  < const 类型标识符 &引用名 = 目标变量名 >
            
            用这种方式声明的引用，不能通过引用对目标变量的值进行修改，从而使引用的目标成为const，达到了引用的安全性。
            
            
####    (3)引用之间的赋值：
            
                虽然引用被初始化后，不能改变其引用关系；但是，可以给它赋值其它引用。引用之间的赋值并不改变引用和被引用变量的
                
                地址，只改变了引用对象的值。
                
                
####    (4)指针的引用： < 类型标识符* &引用名 = 目标变量名 >
            
                指针的引用就是某一指针的别名，对引用的操作与对指针的直接操作完全一样。* 和 & 是两个东西，放在一起在某种程度上
                
                指针的引用类似于二级指针（指针的指针）。
                
            
        
##  引用和指针的区别：
            
            （1）：引用被创建的同时必须被初始化，指针则可以在任何时候初始化。
            
            （2）：不能有NULL引用，引用不许与合法的存储单元关联，指针则可以是NULL的。在使用之前不需要测试它的合法性。相反，指
                   针则应该总是被测试，防止其为空。
            
            （3）：一旦引用被初始化，就不能改变引用的关系，但是指定的对象其内容可以被改变。指针可以被重新赋值以指向另一个不同
                   的对象。
                   
            （4）：引用的初始化并不需要另外开辟内存单元来存放这个变量的值，他和被引用对象占同一块内存空间。而指针的定义必须要
                   另外开辟内存单元，来存放它所指向的地址。
                   
            （5）：在参数传递时，引用会做类型检查，而指针不会。 




